# 이미 있는 것을 다시 만드느라 시간을 낭비하지 말라

# _____________________________________________

# abs : 어떤 숫자를 입력받았을 때 그 숫자의 절댓값을 리턴하는 함수
# Abs = abs(-3)
# print(Abs)

# _____________________________________________

# all : 반복 가능한 데이터 x를 입력값으로 받으며 이 x의 요소가 모두 참이면 True, 거짓이 하나라도 있으면 False를 리턴
# All = all([1, 2, 3])
# All2 = all([0, 2, 3])
# All3 = all([])
# print(All)
# print(All2)
# print(All3) # all 입력 인수가 빈값인 경우는 True를 리턴

# _____________________________________________

# any : 반복 가능한 데이터 x를 입력으로 받아 x의 요소 중 하나라도 참이 있으면 True를 리턴하고 x가 모두 거짓일 때만 False를 리턴. 즉, all의 반대로 작동
# any1 = any([1, 2, 3, 0])
# any2 = any([0, ""])

# print(any1)
# print(any2)

# _____________________________________________

# chr : 유니코드 숫자 값을 입력받아 크 코드에 해당하는 문자를 리턴
##### 유니코드 : 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준 코드
# chr1 = chr(97)
# chr2 = chr(44032)
# print(chr1)
# print(chr2)

# _____________________________________________

# dir : 객체가 지닌 변수나 함수를 보여주는 함수
# dir1 = dir([1, 2, 3])
# dir2 = dir({'1':'a'})
# print(dir1)
# print(dir2)

# _____________________________________________

# divmod : 2개의 숫자 a, b를 입력으로 받고 a를 b로 나눈 몫과 나머지를 튜플로 리턴
# print(divmod(5, 2))

# _____________________________________________

# enumerate : '열거하다'라는 뜻, 순서가 있는 데이터(리스트/튜플/문자열)를 입력받으로 받아 인덱스 값을 포함하는 enumerate 객체를 리턴
# for i, name in enumerate(['body', 'foo', 'bar']):
#     print(i, name)
# 인덱스 값과 함께 body,foo,bar가 순서대로 출력됨
    # for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려주는 인덱스 값이 필요할 때 enumerate 함수를 사용하면 유용

# _____________________________________________
    
# eval : 문자열로 구성된 표현식을 입력받아 해당 문자열을 실행한 결과값을 리턴
# print(eval('1+2'))
# print(eval('"hi" + "a"'))
# print(eval('divmod(4, 3)'))

# _____________________________________________

# filter : '무엇인가를 걸러 낸다'라는 뜻으로 filter 함수도 이와 비슷한 기능을 함
# def positive(l):
#     result = []
#     for i in l:
#         if i > 0:
#             result.append(i)
#     return result
# print(positive([1, -3, 2, 0, -5, 6]))

# 위 코드 filter 함수 사용하면 아래코드로 사용 가능
# def positive(x):
#     return x > 0
# print(list(filter(positive, [1, -3, 2, 0, -5, 6])))

# _____________________________________________

# hex : 정수를 입력받아 16진수 문자열로 변환하여 리턴 
# print(hex(234))
# print(hex(3))

# _____________________________________________

# id : 객체를 입력받아 객체의 고유 주솟값(레퍼런스)을 리턴
# a = 3
# print(id(3))
# print(id(a))
# b = a
# print(id(b))

# _____________________________________________

# isinstance : 첫번째 인수로 객체, 두번째 인수로 클래스를 받는다. 입력으로 받은 객체가 그 클래스의 인스턴스인지 판단하여 참이면 True, 거짓이면 False를 리턴
# class Person: pass
# a = Person()
# print(isinstance(a, Person))

# _____________________________________________

# map : 함수와 반복 가능한 데이터를 입력으로 받는다. map은 입력받은 데이터의 각 요소에 함수를 적용한 결과를 리턴
# def two_times(numberList):
#     result = []
#     for number in numberList:
#         result.append(number * 2)
#     return result
# result = two_times([1, 2, 3, 4])
# print(result)

# 위 코드 map 함수 사용하면 아래코드로 사용 가능
# def two_times(x):
#     return x * 2
# print(list(map(two_times, [1, 2, 3, 4])))

# 위 코드를 한번더 lambda 를 사용하면
# print(list(map(lambda a: a * 2, [1, 2, 3, 4])))

# _____________________________________________

# open : 정수를 8진수 문자열로 바꾸어 리턴
# print(oct(34))
# print(oct(12345))

# _____________________________________________

# ord : 문자의 유니코드 숫자값을 리턴 / chr 함수와 반대로 동작.

# print(ord('a'))
# print(ord('가'))

# _____________________________________________

# pow : pow(x, y) x를 y제곱한 결과값을 리턴
# print(pow(3, 5))
# print(pow(2, 115))

# _____________________________________________

# zip : 동일한 개수로 이루어진 데이터들을 묶어서 리턴
# print(list(zip([1,2,3],[4,5,6])))
# print(list(zip([1,2,3],[4,5,6],[7,8,9])))
# print(list(zip("abc", "def")))

# _____________________________________________
